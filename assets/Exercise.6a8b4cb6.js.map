{"version":3,"file":"Exercise.6a8b4cb6.js","sources":["../../src/demo/views/Exercise.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Molecule } from 'openchemlib/full';\nimport { useState, useEffect, useCallback } from 'react';\nimport { MF } from 'react-mf';\nimport { StructureEditor } from 'react-ocl/full';\n\nimport NMRium from '../../component/NMRium';\n\nlet answers = JSON.parse(localStorage.getItem('nmrium-exercises') || '{}');\n\nasync function loadData(file) {\n  const response = await fetch(file);\n  checkStatus(response);\n  const data = await response.json();\n  return data;\n}\n\nfunction checkStatus(response) {\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n  }\n  return response;\n}\n\nconst titleCss = css`\n  text-transform: none;\n  margin: 0;\n  padding: 5px;\n  background-color: white;\n  font-size: 14px;\n  color: #3e3e3e;\n\n  p {\n    font-size: 10px;\n    margin: 0px;\n  }\n`;\n\nconst mainContainer = css`\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  overflow: hidden;\n`;\n\nconst bottomContainer = css`\n  display: flex;\n  height: 50%;\n`;\n\nconst bottomRightContainer = css`\n  width: 50%;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`;\n\nconst mfCss = css`\n  height: 20%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  border: 1px dashed gray;\n`;\n\nconst resultContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 80%;\n  position: relative;\n`;\n\nconst structureEditorCss = css`\n  background-color: white;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst showButtonCss = css`\n  outline: none;\n  border: none;\n  border-top: 0.55px solid #c1c1c1;\n  border-bottom: 0.55px solid #c1c1c1;\n  color: #00b707;\n  font-weight: bold;\n  font-size: 12px;\n  padding: 5px;\n\n  &:hover {\n    color: white !important;\n    background-color: #00b707;\n  }\n`;\n\nconst styles = css`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  margin-left: 30px;\n`;\n\nexport default function Exercise(props) {\n  const [data, setData] = useState<any>();\n  const [resultFlag, setResultFlag] = useState<boolean | null>(null);\n  const [answerAreaVisible, showAnswerArea] = useState(false);\n  const { file, title, baseURL } = props;\n\n  const checkAnswer = useCallback(\n    (response) => {\n      if (data.answer) {\n        const MolResponse = Molecule.fromMolfile(response);\n        const idCodeResponse = MolResponse.getIDCode();\n        answers[data.answer.idCode] = idCodeResponse;\n        localStorage.setItem('nmrium-exercises', JSON.stringify(answers));\n        if (data.answer.idCode === idCodeResponse) {\n          // correct answer\n          setResultFlag(true);\n        } else {\n          setResultFlag(false);\n          // wrong answer\n        }\n      }\n    },\n    [data],\n  );\n\n  useEffect(() => {\n    if (file) {\n      void loadData(file).then((d) => {\n        const _d = JSON.parse(JSON.stringify(d).replace(/\\.\\/+?/g, baseURL));\n\n        if (_d?.molecules?.[0]?.molfile) {\n          const molecule = Molecule.fromMolfile(_d.molecules[0].molfile);\n          const idCode = molecule.getIDCode();\n          let currentAnswer = answers[idCode];\n\n          if (currentAnswer) {\n            currentAnswer = Molecule.fromIDCode(currentAnswer).toMolfile();\n          }\n          _d.answer = {\n            idCode,\n            currentAnswer,\n            mf: molecule.getMolecularFormula().formula,\n          };\n          setData(_d);\n        }\n      });\n    } else {\n      setData({});\n    }\n  }, [baseURL, file, props]);\n\n  const showAnswerAreaHander = useCallback(() => {\n    showAnswerArea((prev) => !prev);\n  }, []);\n\n  return (\n    <div css={styles}>\n      <p css={titleCss}>\n        <strong>Exercises: </strong>Determine the unknown structure for the\n        compound having the following NMR spectrum\n        <p>{title}</p>\n      </p>\n      <div css={mainContainer}>\n        <div\n          style={{ height: answerAreaVisible ? '50%' : 'calc(100% - 25px)' }}\n        >\n          <NMRium\n            data={data}\n            preferences={{\n              general: {\n                disableMultipletAnalysis: true,\n                hideSetSumFromMolecule: true,\n              },\n              panels: {\n                hidePeaksPanel: true,\n                hideInformationPanel: true,\n                hideRangesPanel: true,\n                hideStructuresPanel: true,\n                hideFiltersPanel: true,\n                hideZonesPanel: true,\n                hideSummaryPanel: true,\n                hideMultipleSpectraAnalysisPanel: true,\n              },\n            }}\n          />\n        </div>\n        <button\n          css={showButtonCss}\n          type=\"button\"\n          onClick={showAnswerAreaHander}\n        >\n          {!answerAreaVisible ? 'Show answer area' : 'Hide answer area '}\n        </button>\n\n        <div\n          css={bottomContainer}\n          style={\n            answerAreaVisible\n              ? { height: '50%' }\n              : { height: '0%', visibility: 'hidden' }\n          }\n        >\n          <div css={structureEditorCss}>\n            <StructureEditor\n              svgMenu\n              fragment={false}\n              onChange={checkAnswer}\n              initialMolfile={data?.answer?.currentAnswer}\n            />\n          </div>\n          <div css={bottomRightContainer}>\n            <div css={mfCss}>\n              <MF\n                style={{ color: 'navy', fontSize: 30 }}\n                mf={data?.answer?.mf}\n              />\n            </div>\n            <div css={resultContainer}>\n              <div\n                style={{\n                  ...styles,\n                  backgroundColor:\n                    resultFlag == null ? 'white' : resultFlag ? 'green' : 'red',\n                  color: resultFlag == null ? 'black' : 'white',\n                  width: '80%',\n                  height: '80%',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                {resultFlag == null ? (\n                  <p>Result</p>\n                ) : resultFlag === true ? (\n                  <p>Right Molecule</p>\n                ) : (\n                  <p>Wrong Molecule !!</p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["JSON","async","response","props","idCode","style","hideSetSumFromMolecule","hidePeaksPanel","hideInformationPanel","hideRangesPanel","hideStructuresPanel","hideFiltersPanel","type","onClick","css","bottomContainer","svgMenu","onChange","resultContainer","backgroundColor","color","width","height"],"mappings":"2hBAaE,MAAYA,2DACZC,4CAMwD,4FAFrCC,SAOJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+IAyFoBC,2EAGYD,wGAKzBE,mbAoCnB,0DAIC,yDAOyC,4IAInCC,0GAMIC,mCAGAC,kBACAC,wBACAC,mBACAC,uBACAC,qHAcNC,cACAC,8DAMKC,IAAKC,qEAGND,YAEAE,uBAGCC,+GAICH,YAGCT,kGAGIa,gCAKHC,gDACAC,8BACAC,YACAC"}